# This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
version: 2.1
orbs:
  # Choose either one of the orbs below
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3


commands:
  destroy_environment:
    steps:
      - run: 
          name: Destroy Envvironment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name samnzay-stack-${CIRCLE_WORKFLOW_ID:0:7}
          
  

#orchestrate or Schedule sets of jobs
jobs:
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file infra-template.yml \
              --stack-name samnzay-stack-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1
      # fail the job intentionally to destroy the failed infranstructure
      - run: return 1
      - destroy_environment

  configure_infrastructure:
    docker:
      - image: python:3.9.16-alpine3.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e1:e2:30:0c:61:c4:50:90:a3:6c:23:5a:72:0e:8d:2c"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      
      - run: 
          name: Configure server
          command: |
            ansible-playbook --user=ubuntu -vvvv -i inventory main-remote.yml -c paramiko

  SmokeTest:
    docker:
      - image: amazon/aws-cli
    
    steps:
      - checkout
      - run:
          name: smoke test
          # check if the website exist
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      - destroy_environment   
  

  #Write a job named create_and_deploy_front_end that executes the bucket.yml template to:
  #Create a new S3 bucket and
  #Copy the contents of the current repo (production files) to the new bucket.

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}" \

      #- run: aws s3 sync .s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
  
  #Write a CircleCI job named get_last_deployment_id that performs 
  #the query and saves the id to a file that we can persist to the workspace.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt
  
  #Write a job named "promote_to_production" that executes our cloudfront.yml 
  #CloudFormation template used in the manual steps
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute Cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
  
  
  #Write a Job Named "clean_up_old_front_end" that uses the pipeline ID 
  #to destroy the previous production version's S3 bucket and CloudFormation stack.
  # To achieve this, you need to retrieve from the workspace the file where the previous Pipeline ID was stored.
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and cloudformation stack
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive

          #  aws cloudformation delete-stack --stack-name production-distro 
          #  aws cloudformation delete-stack --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7}
          #  aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  # Name the workflow "infrastructure"
  #infrastructure:
      # Run the welcome/run job in its own container
    #jobs:
      #- create_infrastructure
      #- configure_infrastructure
          #requires:
            #- create_infrastructure
  Promote_to_Production:
    jobs:
      - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
        
      