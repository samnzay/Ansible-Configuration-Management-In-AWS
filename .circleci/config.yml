# This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
version: 2.1
orbs:
  # Choose either one of the orbs below
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3


commands:
  destroy_environment:
    steps:
      - run: 
          name: Destroy Envvironment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name samnzay-stack-${CIRCLE_WORKFLOW_ID:0:7}
          
  

#orchestrate or Schedule sets of jobs
jobs:
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file infra-template.yml \
              --stack-name samnzay-stack-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1

      - run: return 1
      - destroy_environment

  configure_infrastructure:
    docker:
      - image: python:3.9.16-alpine3.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e1:e2:30:0c:61:c4:50:90:a3:6c:23:5a:72:0e:8d:2c"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      
      - run: 
          name: Configure server
          command: |
            ansible-playbook --user=ubuntu -vvvv -i inventory main-remote.yml -c paramiko

  SmokeTest:
    docker:
      - image: amazon/aws-cli
    
    steps:
      - checkout
      - run:
          name: smoke test
          # fail the command intentionally
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      - destroy_environment   

      # - destroy_environment


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  # Name the workflow "infrastructure"
  infrastructure:
      # Run the welcome/run job in its own container
    jobs:
      - create_infrastructure
      #- configure_infrastructure
          #requires:
            #- create_infrastructure
        
      